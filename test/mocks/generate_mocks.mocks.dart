// Mocks generated by Mockito 5.0.17 from annotations
// in memo_sample/test/mocks/generate_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i4;
import 'package:hooks_riverpod/hooks_riverpod.dart' as _i6;
import 'package:memo_sample/infrastructure/model/memo.dart' as _i2;
import 'package:memo_sample/infrastructure/repository/memo_repository.dart'
    as _i8;
import 'package:memo_sample/presentation/controller/auth_controller/auth_controller.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTime_0 extends _i1.Fake implements DateTime {}

class _Fake$MemoCopyWith_1<$Res> extends _i1.Fake
    implements _i2.$MemoCopyWith<$Res> {}

class _FakeMemo_2 extends _i1.Fake implements _i2.Memo {}

class _FakeDocumentReference_3<T extends Object?> extends _i1.Fake
    implements _i3.DocumentReference<T> {}

class _FakeUserMetadata_4 extends _i1.Fake implements _i4.UserMetadata {}

class _FakeIdTokenResult_5 extends _i1.Fake implements _i4.IdTokenResult {}

class _FakeUserCredential_6 extends _i1.Fake implements _i5.UserCredential {}

class _FakeConfirmationResult_7 extends _i1.Fake
    implements _i5.ConfirmationResult {}

class _FakeUser_8 extends _i1.Fake implements _i5.User {}

class _FakeAsyncValue_9<T> extends _i1.Fake implements _i6.AsyncValue<T> {}

class _Fake$AuthStateCopyWith_10<$Res> extends _i1.Fake
    implements _i7.$AuthStateCopyWith<$Res> {}

/// A class which mocks [Memo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemo extends _i1.Mock implements _i2.Memo {
  MockMemo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  String get text =>
      (super.noSuchMethod(Invocation.getter(#text), returnValue: '') as String);
  @override
  DateTime get createdAt => (super.noSuchMethod(Invocation.getter(#createdAt),
      returnValue: _FakeDateTime_0()) as DateTime);
  @override
  DateTime get updatedAt => (super.noSuchMethod(Invocation.getter(#updatedAt),
      returnValue: _FakeDateTime_0()) as DateTime);
  @override
  _i2.$MemoCopyWith<_i2.Memo> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$MemoCopyWith_1<_i2.Memo>())
          as _i2.$MemoCopyWith<_i2.Memo>);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [MemoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemoRepository extends _i1.Mock implements _i8.MemoRepository {
  MockMemoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Memo> fetchMemo({String? userId, String? memoId}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchMemo, [], {#userId: userId, #memoId: memoId}),
          returnValue:
              Future<_i2.Memo>.value(_FakeMemo_2())) as _i9.Future<_i2.Memo>);
  @override
  _i9.Future<_i3.DocumentReference<Object?>> add(
          {String? userId, String? title, String? text}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #add, [], {#userId: userId, #title: title, #text: text}),
              returnValue: Future<_i3.DocumentReference<Object?>>.value(
                  _FakeDocumentReference_3<Object?>()))
          as _i9.Future<_i3.DocumentReference<Object?>>);
  @override
  _i9.Future<void> update(
          {String? userId, String? memoId, String? title, String? text}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [],
              {#userId: userId, #memoId: memoId, #title: title, #text: text}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> delete({String? userId, String? memoId}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {#userId: userId, #memoId: memoId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i5.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  _i4.UserMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata_4()) as _i4.UserMetadata);
  @override
  List<_i4.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i4.UserInfo>[]) as List<_i4.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i4.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i4.IdTokenResult>.value(_FakeIdTokenResult_5()))
          as _i9.Future<_i4.IdTokenResult>);
  @override
  _i9.Future<_i5.UserCredential> linkWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_6()))
          as _i9.Future<_i5.UserCredential>);
  @override
  _i9.Future<_i5.UserCredential> linkWithPopup(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#linkWithPopup, [provider]),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_6()))
          as _i9.Future<_i5.UserCredential>);
  @override
  _i9.Future<_i5.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i5.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: Future<_i5.ConfirmationResult>.value(
                  _FakeConfirmationResult_7()))
          as _i9.Future<_i5.ConfirmationResult>);
  @override
  _i9.Future<_i5.UserCredential> reauthenticateWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i5.UserCredential>.value(_FakeUserCredential_6()))
          as _i9.Future<_i5.UserCredential>);
  @override
  _i9.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> sendEmailVerification(
          [_i4.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#sendEmailVerification, [actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i5.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: Future<_i5.User>.value(_FakeUser_8()))
          as _i9.Future<_i5.User>);
  @override
  _i9.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhoneNumber(
          _i4.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoneNumber, [phoneCredential]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(Invocation.method(#updatePhotoURL, [photoURL]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProfile, [],
              {#displayName: displayName, #photoURL: photoURL}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i4.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [AuthState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthState extends _i1.Mock implements _i7.AuthState {
  MockAuthState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasAlreadySignedIn =>
      (super.noSuchMethod(Invocation.getter(#hasAlreadySignedIn),
          returnValue: false) as bool);
  @override
  _i6.AsyncValue<_i5.User?> get firebaseUser =>
      (super.noSuchMethod(Invocation.getter(#firebaseUser),
              returnValue: _FakeAsyncValue_9<_i5.User?>())
          as _i6.AsyncValue<_i5.User?>);
  @override
  _i7.$AuthStateCopyWith<_i7.AuthState> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$AuthStateCopyWith_10<_i7.AuthState>())
          as _i7.$AuthStateCopyWith<_i7.AuthState>);
}
